let nothing: (list(operation), unit) = ([], ()) /* Creates a storage for Multi with one administrator. */;

let init_storage = (myname: string) =>
  Map.add(myname, 0, Map([("ocaml", 0), ("pro", 0)]));

let deploy_account_op = (amount: tez): (operation, address) => {
  let delegate: option(key_hash) = None;
  Account.create(
    ~manager=tz1YLtLqD1fWHthSVHPD116oYvsd4PTAHUoc,
    ~delegate,
    ~delegatable=true,
    ~amount,
  );
}; 

let deploy_contract_op = (storage: Demo.storage): (operation, address) => {
  let delegate: option(key_hash) = None;
  Contract.create(
    ~manager=tz1YLtLqD1fWHthSVHPD116oYvsd4PTAHUoc,
    ~delegate,
    ~delegatable=true,
    ~spendable=false,
    ~amount=0tz,
    ~storage,
    ~code=(contract Demo),
  );
};

type storage = unit;

let%entry test = (_param: unit, _storage: unit) => {
  let (fund_op, address) = deploy_account_op(10tz);
  let storage = init_storage("reason"); 
  let (main_op, main) = deploy_contract_op(storage);
  Techel.apply_operations([fund_op, main_op]);

  let balance = Techel.get_balance(address);
  if (balance != 10tz) {
    failwith("balance should be 10tz");
  };

  let storage =
    switch (Techel.get_storage([%type: Demo.storage], main)) {
    | Some(storage) => storage
    | None => failwith("can't retrieve contract's storage")
    };

  switch (Map.find("reason", storage)) {
  | None => failwith("no reason in storage")
  | Some(v) =>
    if (v != 0) {
      failwith("wrong number of votes for reason");
    }
  };

  let main_instance =
    switch (Demo.at(main)) {
    | None => failwith("could not retrieve main contract")
    | Some(instance) => instance
    };

  let vote_op =
    Contract.call(
      ~dest=main_instance,
      ~amount=5tz,
      ~entry=main,
      ~parameter=("reason"),
    );

  Techel.apply_operations([vote_op]);

  let storage =
    switch (Techel.get_storage([%type: Demo.storage], main)) {
    | Some(storage) => storage
    | None => failwith("can't retrieve contract's storage")
    };

  switch (Map.find("reason", storage)) {
  | None => failwith("no reason in storage")
  | Some(a) =>
    if (a != 1) {
      failwith("wrong number of votes for reason");
    }
  };

  nothing;
};
